#include "chip8.hpp"
#include "SDL3/SDL.h"
#include "SDL3/SDL_main.h"

std::vector<uint8_t> ibm_logo{
    0x00, 0xE0, 0xA2, 0x2A, 0x60, 0x0C, 0x61, 0x08, 0xD0, 0x1F, 0x70, 0x09,
    0xA2, 0x39, 0xD0, 0x1F, 0xA2, 0x48, 0x70, 0x08, 0xD0, 0x1F, 0x70, 0x04,
    0xA2, 0x57, 0xD0, 0x1F, 0x70, 0x08, 0xA2, 0x66, 0xD0, 0x1F, 0x70, 0x08,
    0xA2, 0x75, 0xD0, 0x1F, 0x12, 0x28,

    0xFF, 0x00, 0xFF, 0x00, 0x3C, 0x00,	0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0xFF, 0x00, 0xFF,
    0xFF, 0x00, 0xFF, 0x00, 0x38, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x38, 0x00, 0xFF, 0x00, 0xFF,
    0x80, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0x80, 0x00, 0x80, 0x00, 0xE0, 0x00,	0xE0, 0x00, 0x80,
    0xF8, 0x00, 0xFC, 0x00, 0x3E, 0x00, 0x3F, 0x00, 0x3B, 0x00, 0x39, 0x00, 0xF8, 0x00, 0xF8,
    0x03, 0x00, 0x07, 0x00, 0x0F, 0x00,	0xBF, 0x00, 0xFB, 0x00, 0xF3, 0x00, 0xE3, 0x00, 0x43,
    0xE0, 0x00, 0xE0, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0xE0, 0x00, 0xE0
};

std::vector<uint8_t> test_opcode{
        0x12, 0x0A, 0x60, 0x01, 0x00, 0xEE, 0x60, 0x02, 0x12, 0xA6, 0x00, 0xE0,
        0x68, 0x32, 0x6B, 0x1A, 0xA4, 0xF1, 0xD8, 0xB4, 0x68, 0x3A, 0xA4, 0xF5,
        0xD8, 0xB4, 0x68, 0x02, 0x69, 0x06, 0x6A, 0x0B, 0x6B, 0x01, 0x65, 0x2A,
        0x66, 0x2B, 0xA4, 0xB5, 0xD8, 0xB4, 0xA4, 0xED, 0xD9, 0xB4, 0xA4, 0xA5,
        0x36, 0x2B, 0xA4, 0xA1, 0xDA, 0xB4, 0x6B, 0x06, 0xA4, 0xB9, 0xD8, 0xB4,
        0xA4, 0xED, 0xD9, 0xB4, 0xA4, 0xA1, 0x45, 0x2A, 0xA4, 0xA5, 0xDA, 0xB4,
        0x6B, 0x0B, 0xA4, 0xBD, 0xD8, 0xB4, 0xA4, 0xED, 0xD9, 0xB4, 0xA4, 0xA1,
        0x55, 0x60, 0xA4, 0xA5, 0xDA, 0xB4, 0x6B, 0x10, 0xA4, 0xC5, 0xD8, 0xB4,
        0xA4, 0xED, 0xD9, 0xB4, 0xA4, 0xA1, 0x76, 0xFF, 0x46, 0x2A, 0xA4, 0xA5,
        0xDA, 0xB4, 0x7B, 0x05, 0xA4, 0xCD, 0xD8, 0xB4, 0xA4, 0xED, 0xD9, 0xB4,
        0xA4, 0xA1, 0x95, 0x60, 0xA4, 0xA5, 0xDA, 0xB4, 0x7B, 0x05, 0xA4, 0xAD,
        0xD8, 0xB4, 0xA4, 0xED, 0xD9, 0xB4, 0xA4, 0xA5, 0x12, 0x90, 0xA4, 0xA1,
        0xDA, 0xB4, 0x68, 0x12, 0x69, 0x16, 0x6A, 0x1B, 0x6B, 0x01, 0xA4, 0xB1,
        0xD8, 0xB4, 0xA4, 0xED, 0xD9, 0xB4, 0x60, 0x00, 0x22, 0x02, 0xA4, 0xA5,
        0x40, 0x00, 0xA4, 0xA1, 0xDA, 0xB4, 0x7B, 0x05, 0xA4, 0xA9, 0xD8, 0xB4,
        0xA4, 0xE1, 0xD9, 0xB4, 0xA4, 0xA5, 0x40, 0x02, 0xA4, 0xA1, 0x30, 0x00,
        0xDA, 0xB4, 0x7B, 0x05, 0xA4, 0xC9, 0xD8, 0xB4, 0xA4, 0xA9, 0xD9, 0xB4,
        0xA4, 0xA1, 0x65, 0x2A, 0x67, 0x00, 0x87, 0x50, 0x47, 0x2A, 0xA4, 0xA5,
        0xDA, 0xB4, 0x7B, 0x05, 0xA4, 0xC9, 0xD8, 0xB4, 0xA4, 0xAD, 0xD9, 0xB4,
        0xA4, 0xA1, 0x66, 0x0B, 0x67, 0x2A, 0x87, 0x61, 0x47, 0x2B, 0xA4, 0xA5,
        0xDA, 0xB4, 0x7B, 0x05, 0xA4, 0xC9, 0xD8, 0xB4, 0xA4, 0xB1, 0xD9, 0xB4,
        0xA4, 0xA1, 0x66, 0x78, 0x67, 0x1F, 0x87, 0x62, 0x47, 0x18, 0xA4, 0xA5,
        0xDA, 0xB4, 0x7B, 0x05, 0xA4, 0xC9, 0xD8, 0xB4, 0xA4, 0xB5, 0xD9, 0xB4,
        0xA4, 0xA1, 0x66, 0x78, 0x67, 0x1F, 0x87, 0x63, 0x47, 0x67, 0xA4, 0xA5,
        0xDA, 0xB4, 0x68, 0x22, 0x69, 0x26, 0x6A, 0x2B, 0x6B, 0x01, 0xA4, 0xC9,
        0xD8, 0xB4, 0xA4, 0xB9, 0xD9, 0xB4, 0xA4, 0xA1, 0x66, 0x8C, 0x67, 0x8C,
        0x87, 0x64, 0x47, 0x18, 0xA4, 0xA5, 0xDA, 0xB4, 0x7B, 0x05, 0xA4, 0xC9,
        0xD8, 0xB4, 0xA4, 0xBD, 0xD9, 0xB4, 0xA4, 0xA1, 0x66, 0x8C, 0x67, 0x78,
        0x87, 0x65, 0x47, 0xEC, 0xA4, 0xA5, 0xDA, 0xB4, 0x7B, 0x05, 0xA4, 0xC9,
        0xD8, 0xB4, 0xA4, 0xC5, 0xD9, 0xB4, 0xA4, 0xA1, 0x66, 0x78, 0x67, 0x8C,
        0x87, 0x67, 0x47, 0xEC, 0xA4, 0xA5, 0xDA, 0xB4, 0x7B, 0x05, 0xA4, 0xC9,
        0xD8, 0xB4, 0xA4, 0xC1, 0xD9, 0xB4, 0xA4, 0xA1, 0x66, 0x0F, 0x86, 0x66,
        0x46, 0x07, 0xA4, 0xA5, 0xDA, 0xB4, 0x7B, 0x05, 0xA4, 0xC9, 0xD8, 0xB4,
        0xA4, 0xE1, 0xD9, 0xB4, 0xA4, 0xA1, 0x66, 0xE0, 0x86, 0x6E, 0x46, 0xC0,
        0xA4, 0xA5, 0xDA, 0xB4, 0x7B, 0x05, 0xA4, 0xE5, 0xD8, 0xB4, 0xA4, 0xC1,
        0xD9, 0xB4, 0xA4, 0x9E, 0xF1, 0x65, 0xA4, 0xA5, 0x30, 0xAA, 0xA4, 0xA1,
        0x31, 0x55, 0xA4, 0xA1, 0xDA, 0xB4, 0x68, 0x32, 0x69, 0x36, 0x6A, 0x3B,
        0x6B, 0x01, 0xA4, 0xE5, 0xD8, 0xB4, 0xA4, 0xBD, 0xD9, 0xB4, 0xA4, 0x9E,
        0x60, 0x00, 0x61, 0x30, 0xF1, 0x55, 0xA4, 0x9E, 0xF0, 0x65, 0x81, 0x00,
        0xA4, 0x9F, 0xF0, 0x65, 0xA4, 0xA5, 0x30, 0x30, 0xA4, 0xA1, 0x31, 0x00,
        0xA4, 0xA1, 0xDA, 0xB4, 0x7B, 0x05, 0xA4, 0xE5, 0xD8, 0xB4, 0xA4, 0xB5,
        0xD9, 0xB4, 0xA4, 0x9E, 0x66, 0x89, 0xF6, 0x33, 0xF2, 0x65, 0xA4, 0xA1,
        0x30, 0x01, 0x14, 0x32, 0x31, 0x03, 0x14, 0x32, 0x32, 0x07, 0x14, 0x32,
        0xA4, 0x9E, 0x66, 0x41, 0xF6, 0x33, 0xF2, 0x65, 0xA4, 0xA1, 0x30, 0x00,
        0x14, 0x32, 0x31, 0x06, 0x14, 0x32, 0x32, 0x05, 0x14, 0x32, 0xA4, 0x9E,
        0x66, 0x04, 0xF6, 0x33, 0xF2, 0x65, 0xA4, 0xA1, 0x30, 0x00, 0x14, 0x32,
        0x31, 0x00, 0x14, 0x32, 0x32, 0x04, 0x14, 0x32, 0xA4, 0xA5, 0xDA, 0xB4,
        0x7B, 0x05, 0xA4, 0xE5, 0xD8, 0xB4, 0xA4, 0xE1, 0xD9, 0xB4, 0xA4, 0xA1,
        0x66, 0x04, 0xF6, 0x1E, 0xDA, 0xB4, 0x7B, 0x05, 0xA4, 0xE9, 0xD8, 0xB4,
        0xA4, 0xED, 0xD9, 0xB4, 0xA4, 0xA5, 0x66, 0xFF, 0x76, 0x0A, 0x36, 0x09,
        0xA4, 0xA1, 0x86, 0x66, 0x36, 0x04, 0xA4, 0xA1, 0x66, 0xFF, 0x60, 0x0A,
        0x86, 0x04, 0x36, 0x09, 0xA4, 0xA1, 0x86, 0x66, 0x36, 0x04, 0xA4, 0xA1,
        0x66, 0xFF, 0x86, 0x6E, 0x86, 0x66, 0x36, 0x7F, 0xA4, 0xA1, 0x86, 0x66,
        0x86, 0x6E, 0x36, 0x7E, 0xA4, 0xA1, 0x66, 0x05, 0x76, 0xF6, 0x36, 0xFB,
        0xA4, 0xA1, 0x66, 0x05, 0x86, 0x05, 0x36, 0xFB, 0xA4, 0xA1, 0x66, 0x05,
        0x80, 0x67, 0x30, 0xFB, 0xA4, 0xA1, 0xDA, 0xB4, 0x14, 0x9C, 0xAA, 0x55,
        0x00, 0x00, 0xA0, 0x40, 0xA0, 0x00, 0xA0, 0xC0, 0x80, 0xE0, 0xA0, 0xA0,
        0xE0, 0xC0, 0x40, 0x40, 0xE0, 0xE0, 0x20, 0xC0, 0xE0, 0xE0, 0x60, 0x20,
        0xE0, 0xA0, 0xE0, 0x20, 0x20, 0xE0, 0xC0, 0x20, 0xC0, 0x60, 0x80, 0xE0,
        0xE0, 0xE0, 0x20, 0x40, 0x40, 0xE0, 0xE0, 0xA0, 0xE0, 0xE0, 0xE0, 0x20,
        0xC0, 0x40, 0xA0, 0xE0, 0xA0, 0xC0, 0xE0, 0xA0, 0xE0, 0xE0, 0x80, 0x80,
        0xE0, 0xC0, 0xA0, 0xA0, 0xC0, 0xE0, 0xC0, 0x80, 0xE0, 0xE0, 0x80, 0xC0,
        0x80, 0x00, 0xA0, 0xA0, 0x40, 0xA0, 0x40, 0xA0, 0xA0, 0x0A, 0xAE, 0xA2,
        0x42, 0x38, 0x08, 0x30, 0xB8
    };

std::vector<uint8_t> test_flag{
    0x12, 0xA0, 0x60, 0x00, 0xE0, 0xA1, 0x12, 0x04, 0x70, 0x01, 0x40, 0x10,
    0x00, 0xEE, 0x12, 0x04, 0xFC, 0x65, 0x22, 0x76, 0x41, 0x00, 0x00, 0xEE,
    0x80, 0x10, 0x22, 0x76, 0x42, 0x00, 0x00, 0xEE, 0x80, 0x20, 0x22, 0x76,
    0x43, 0x00, 0x00, 0xEE, 0x80, 0x30, 0x22, 0x76, 0x44, 0x00, 0x00, 0xEE,
    0x80, 0x40, 0x22, 0x76, 0x45, 0x00, 0x00, 0xEE, 0x80, 0x50, 0x22, 0x76,
    0x46, 0x00, 0x00, 0xEE, 0x80, 0x60, 0x22, 0x76, 0x47, 0x00, 0x00, 0xEE,
    0x80, 0x70, 0x22, 0x76, 0x48, 0x00, 0x00, 0xEE, 0x80, 0x80, 0x22, 0x76,
    0x49, 0x00, 0x00, 0xEE, 0x80, 0x90, 0x22, 0x76, 0x4A, 0x00, 0x00, 0xEE,
    0x80, 0xA0, 0x22, 0x76, 0x4B, 0x00, 0x00, 0xEE, 0x80, 0xB0, 0x22, 0x76,
    0x4C, 0x00, 0x00, 0xEE, 0x80, 0xC0, 0x22, 0x76, 0x00, 0xEE, 0xA5, 0x57,
    0xF0, 0x1E, 0xDD, 0xE4, 0x7D, 0x04, 0x00, 0xEE, 0xA5, 0x5B, 0x8E, 0xD0,
    0x8E, 0xEE, 0x8E, 0xEE, 0xFE, 0x1E, 0xDA, 0xB4, 0x7A, 0x05, 0x00, 0xEE,
    0xA5, 0x58, 0x92, 0xC0, 0xA5, 0x55, 0x7B, 0x01, 0xDA, 0xB3, 0x7A, 0x04,
    0x7B, 0xFF, 0x00, 0xEE, 0x00, 0xE0, 0x6A, 0x32, 0x6B, 0x1B, 0xA6, 0x09,
    0xDA, 0xB4, 0x6A, 0x3A, 0xA6, 0x0D, 0xDA, 0xB4, 0x6D, 0x00, 0x6E, 0x00,
    0xA5, 0xF7, 0x22, 0x10, 0x6A, 0x16, 0x6B, 0x00, 0x61, 0x0F, 0x6D, 0x01,
    0x22, 0x80, 0x63, 0x0F, 0x6F, 0x14, 0x83, 0xF1, 0x6F, 0x00, 0x62, 0x32,
    0x82, 0x11, 0x8E, 0xF0, 0x6C, 0x3F, 0x22, 0x90, 0x82, 0xE0, 0x6C, 0x00,
    0x22, 0x90, 0x82, 0x30, 0x6C, 0x1F, 0x22, 0x90, 0x7A, 0x05, 0x6D, 0x02,
    0x22, 0x80, 0x63, 0x0F, 0x6F, 0x14, 0x83, 0xF2, 0x6F, 0x00, 0x62, 0x32,
    0x82, 0x12, 0x8E, 0xF0, 0x6C, 0x02, 0x22, 0x90, 0x82, 0xE0, 0x6C, 0x00,
    0x22, 0x90, 0x82, 0x30, 0x6C, 0x04, 0x22, 0x90, 0x7B, 0x05, 0x6A, 0x00,
    0x6D, 0x03, 0x22, 0x80, 0x63, 0x0F, 0x6F, 0x14, 0x83, 0xF3, 0x6F, 0x00,
    0x62, 0x32, 0x82, 0x13, 0x8E, 0xF0, 0x6C, 0x3D, 0x22, 0x90, 0x82, 0xE0,
    0x6C, 0x00, 0x22, 0x90, 0x82, 0x30, 0x6C, 0x1B, 0x22, 0x90, 0x7A, 0x05,
    0x6D, 0x04, 0x22, 0x80, 0x6F, 0x14, 0x8F, 0x14, 0x84, 0xF0, 0x63, 0x0F,
    0x6F, 0x14, 0x83, 0xF4, 0x6F, 0xAA, 0x62, 0x32, 0x82, 0x14, 0x8E, 0xF0,
    0x6C, 0x41, 0x22, 0x90, 0x82, 0xE0, 0x6C, 0x00, 0x22, 0x90, 0x82, 0x30,
    0x6C, 0x23, 0x22, 0x90, 0x82, 0x40, 0x6C, 0x00, 0x22, 0x90, 0x7A, 0x01,
    0x6D, 0x05, 0x22, 0x80, 0x6F, 0x14, 0x8F, 0x15, 0x84, 0xF0, 0x63, 0x14,
    0x6F, 0x0F, 0x83, 0xF5, 0x65, 0x0A, 0x6F, 0x0A, 0x85, 0xF5, 0x85, 0xF0,
    0x6F, 0xAA, 0x62, 0x32, 0x82, 0x15, 0x35, 0x01, 0x6F, 0x02, 0x8E, 0xF0,
    0x6C, 0x23, 0x22, 0x90, 0x82, 0xE0, 0x6C, 0x01, 0x22, 0x90, 0x82, 0x30,
    0x6C, 0x05, 0x22, 0x90, 0x82, 0x40, 0x6C, 0x01, 0x22, 0x90, 0x7B, 0x05,
    0x6A, 0x00, 0x6D, 0x06, 0x22, 0x80, 0x6F, 0x3C, 0x8F, 0xF6, 0x83, 0xF0,
    0x6F, 0xAA, 0x62, 0x3C, 0x82, 0x26, 0x8E, 0xF0, 0x6C, 0x1E, 0x22, 0x90,
    0x82, 0xE0, 0x6C, 0x00, 0x22, 0x90, 0x82, 0x30, 0x6C, 0x00, 0x22, 0x90,
    0x7A, 0x05, 0x6D, 0x07, 0x22, 0x80, 0x6F, 0x0A, 0x8F, 0x17, 0x84, 0xF0,
    0x63, 0x0F, 0x6F, 0x14, 0x83, 0xF7, 0x65, 0x0A, 0x6F, 0x0A, 0x85, 0xF7,
    0x85, 0xF0, 0x6F, 0xAA, 0x62, 0x0F, 0x61, 0x32, 0x82, 0x17, 0x35, 0x01,
    0x6F, 0x02, 0x8E, 0xF0, 0x6C, 0x23, 0x22, 0x90, 0x82, 0xE0, 0x6C, 0x01,
    0x22, 0x90, 0x82, 0x30, 0x6C, 0x05, 0x22, 0x90, 0x82, 0x40, 0x6C, 0x01,
    0x22, 0x90, 0x7A, 0x01, 0x6D, 0x0E, 0x22, 0x80, 0x6F, 0x32, 0x8F, 0xFE,
    0x83, 0xF0, 0x6F, 0xAA, 0x62, 0x32, 0x82, 0x2E, 0x8E, 0xF0, 0x6C, 0x64,
    0x22, 0x90, 0x82, 0xE0, 0x6C, 0x00, 0x22, 0x90, 0x82, 0x30, 0x6C, 0x00,
    0x22, 0x90, 0x6D, 0x00, 0x6E, 0x10, 0xA5, 0xFD, 0x22, 0x10, 0x6A, 0x16,
    0x6B, 0x10, 0x61, 0x64, 0x6D, 0x04, 0x22, 0x80, 0x6F, 0xC8, 0x8F, 0x14,
    0x84, 0xF0, 0x63, 0x64, 0x6F, 0xC8, 0x83, 0xF4, 0x6F, 0xAA, 0x62, 0xC8,
    0x82, 0x14, 0x8E, 0xF0, 0x6C, 0x2C, 0x22, 0x90, 0x82, 0xE0, 0x6C, 0x01,
    0x22, 0x90, 0x82, 0x30, 0x6C, 0x2C, 0x22, 0x90, 0x82, 0x40, 0x6C, 0x01,
    0x22, 0x90, 0x7A, 0x01, 0x6D, 0x05, 0x22, 0x80, 0x6F, 0x5F, 0x8F, 0x15,
    0x84, 0xF0, 0x63, 0x5F, 0x6F, 0x64, 0x83, 0xF5, 0x6F, 0xAA, 0x62, 0x5F,
    0x82, 0x15, 0x8E, 0xF0, 0x6C, 0xFB, 0x22, 0x90, 0x82, 0xE0, 0x6C, 0x00,
    0x22, 0x90, 0x82, 0x30, 0x6C, 0xFB, 0x22, 0x90, 0x82, 0x40, 0x6C, 0x00,
    0x22, 0x90, 0x7B, 0x05, 0x6A, 0x00, 0x6D, 0x06, 0x22, 0x80, 0x6F, 0x3D,
    0x8F, 0xF6, 0x83, 0xF0, 0x6F, 0xAA, 0x62, 0x3D, 0x82, 0x26, 0x8E, 0xF0,
    0x6C, 0x1E, 0x22, 0x90, 0x82, 0xE0, 0x6C, 0x01, 0x22, 0x90, 0x82, 0x30,
    0x6C, 0x01, 0x22, 0x90, 0x7A, 0x05, 0x6D, 0x07, 0x22, 0x80, 0x6F, 0x69,
    0x8F, 0x17, 0x84, 0xF0, 0x63, 0x69, 0x6F, 0x64, 0x83, 0xF7, 0x6F, 0xAA,
    0x62, 0x69, 0x82, 0x17, 0x8E, 0xF0, 0x6C, 0xFB, 0x22, 0x90, 0x82, 0xE0,
    0x6C, 0x00, 0x22, 0x90, 0x82, 0x30, 0x6C, 0xFB, 0x22, 0x90, 0x82, 0x40,
    0x6C, 0x00, 0x22, 0x90, 0x7A, 0x01, 0x6D, 0x0E, 0x22, 0x80, 0x6F, 0xBC,
    0x8F, 0xFE, 0x83, 0xF0, 0x6F, 0xAA, 0x62, 0xBC, 0x82, 0x2E, 0x8E, 0xF0,
    0x6C, 0x78, 0x22, 0x90, 0x82, 0xE0, 0x6C, 0x01, 0x22, 0x90, 0x82, 0x30,
    0x6C, 0x01, 0x22, 0x90, 0x6D, 0x00, 0x6E, 0x1B, 0xA6, 0x03, 0x22, 0x10,
    0x6A, 0x16, 0x6B, 0x1B, 0x6D, 0x0F, 0x22, 0x80, 0x7A, 0xFF, 0x6D, 0x0E,
    0x22, 0x80, 0xA5, 0x44, 0x61, 0x10, 0xF1, 0x1E, 0x60, 0xAA, 0xF0, 0x55,
    0xA5, 0x54, 0xF0, 0x65, 0x82, 0x00, 0x6C, 0xAA, 0x22, 0x90, 0xA5, 0x44,
    0x6F, 0x10, 0xFF, 0x1E, 0x60, 0x55, 0xF0, 0x55, 0xA5, 0x54, 0xF0, 0x65,
    0x82, 0x00, 0x6C, 0x55, 0x22, 0x90, 0x15, 0x42, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xA0, 0xC0, 0x80, 0xA0, 0x40, 0xA0, 0xE0, 0xA0, 0xA0, 0xE0, 0xC0,
    0x40, 0x40, 0xE0, 0xE0, 0x20, 0xC0, 0xE0, 0xE0, 0x60, 0x20, 0xE0, 0xA0,
    0xE0, 0x20, 0x20, 0xE0, 0xC0, 0x20, 0xC0, 0xE0, 0x80, 0xE0, 0xE0, 0xE0,
    0x20, 0x20, 0x20, 0xE0, 0xE0, 0xA0, 0xE0, 0xE0, 0xE0, 0x20, 0xE0, 0x40,
    0xA0, 0xE0, 0xA0, 0xC0, 0xE0, 0xA0, 0xE0, 0xE0, 0x80, 0x80, 0xE0, 0xC0,
    0xA0, 0xA0, 0xC0, 0xE0, 0xC0, 0x80, 0xE0, 0xE0, 0x80, 0xC0, 0x80, 0x60,
    0x80, 0xA0, 0x60, 0xA0, 0xE0, 0xA0, 0xA0, 0xE0, 0x40, 0x40, 0xE0, 0x60,
    0x20, 0x20, 0xC0, 0xA0, 0xC0, 0xA0, 0xA0, 0x80, 0x80, 0x80, 0xE0, 0xE0,
    0xE0, 0xA0, 0xA0, 0xC0, 0xA0, 0xA0, 0xA0, 0xE0, 0xA0, 0xA0, 0xE0, 0xC0,
    0xA0, 0xC0, 0x80, 0x40, 0xA0, 0xE0, 0x60, 0xC0, 0xA0, 0xC0, 0xA0, 0x60,
    0xC0, 0x20, 0xC0, 0xE0, 0x40, 0x40, 0x40, 0xA0, 0xA0, 0xA0, 0x60, 0xA0,
    0xA0, 0xA0, 0x40, 0xA0, 0xA0, 0xE0, 0xE0, 0xA0, 0x40, 0xA0, 0xA0, 0xA0,
    0xA0, 0x40, 0x40, 0xE0, 0x60, 0x80, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x48, 0x2C, 0x68, 0x68, 0x8C,
    0x00, 0x34, 0x2C, 0x70, 0x70, 0x8C, 0x00, 0x64, 0x78, 0x48, 0x3C, 0x70,
    0x00, 0x0A, 0xAE, 0xA2, 0x42, 0x38, 0x08, 0x30, 0xB8
};

int main(){
    int ips = 700; // instruction per second. 700 should be good
    int refresh_rate = 60; // FPS
    Chip8 c;
    c.load(test_opcode);

    SDL_Window *window = NULL;
    SDL_Renderer *renderer = NULL;

    // init video / audio
    if(!SDL_Init(SDL_INIT_VIDEO)) {
        SDL_Log("Couldn't initialize SDL: %s", SDL_GetError());
        return SDL_APP_FAILURE;
    }

    if(!SDL_CreateWindowAndRenderer("examples/renderer/primitives", 1280, 720, 0, &window, &renderer)) {
        SDL_Log("Couldn't create window/renderer: %s", SDL_GetError());
        return SDL_APP_FAILURE;
    }

    while(4){
        // read key events and update keyboard
        SDL_Event event;
        while(SDL_PollEvent(&event)){
            if (event.type == SDL_EVENT_QUIT) {
                goto exit;
            }
        }

        auto start = std::chrono::high_resolution_clock().now();
        // decrement timers and play sound if necessary
        if(c.get_delay_timer() > 0){
            c.decrement_delay_timer();
        }
        if(c.get_sound_timer()){
            // play sound
            c.decrement_sound_timer();
        }

        for(int i = 0; i < ips / refresh_rate; ++i){
            c.cpu_next_instr();
        }

        // SDL render frame
        SDL_SetRenderDrawColor(renderer, 0, 0, 0, SDL_ALPHA_OPAQUE);  /* dark gray, full alpha */
        SDL_RenderClear(renderer);
        const auto& screen = c.get_screen();
        for(int i = 0; i < 32; ++i){
            for(int j = 0; j < 64; ++j){
                SDL_FRect rect = {20.f * j, 20.f * i, 20, 20};
                if(screen.test(i * 64 + j)){
                    SDL_SetRenderDrawColor(renderer, 255, 255, 255, SDL_ALPHA_OPAQUE);
                }
                else{
                    SDL_SetRenderDrawColor(renderer, 0, 0, 0, SDL_ALPHA_OPAQUE);  /* dark gray, full alpha */
                }
                SDL_RenderFillRect(renderer, &rect);
            }
        }
        SDL_RenderPresent(renderer);

        // const auto& screen = c.get_screen();
        // for(int i = 0; i < 32; ++i){
        //     for(int j = 0; j < 64; ++j){
        //         bool a = screen[i * 64 + j];
        //         LOG("{}", a?"1":" ");
        //     }
        //     LOGLN("");
        // }
        // LOGLN("\n\n");

        auto end = std::chrono::high_resolution_clock().now();
        float active_time = std::chrono::duration<float, std::milli>(end - start).count();

        assert(active_time < 16.67);
        SDL_Delay(static_cast<uint32_t>(16.67f - active_time));
    }

exit:
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);

    SDL_Quit();
}